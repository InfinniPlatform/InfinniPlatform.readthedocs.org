.. index:: DynamicWrapper

Динамические объекты
====================

Динамические объекты предоставляют такие элементы, как свойства и методы, во время выполнения, а не во время компиляции. Это позволяет
создавать объекты для работы со структурами, не соответствующими статическому типу или формату. Создав экземпляр динамического объекта,
можно установить для него уникальный набор свойств; получив ссылку на динамический объект, можно обращаться к несуществующим свойствам.
Подобное поведение становится возможным благодаря позднему связыванию с помощью ключевого слова ``dynamic``. Основной сценарий использования
динамических объектов - обработка слабоструктурированных или слабоформализованных данных.

Создание динамических объектов
------------------------------

В InfinniPlatform экземпляры динамических объектов представлены классом ``InfinniPlatform.Sdk.Dynamic.DynamicWrapper``.

.. code-block:: csharp

    dynamic instance = new DynamicWrapper();

Установка свойств динамических объектов
---------------------------------------

Экземпляр динамического объекта можно создать с предустановленным набором свойств:

.. code-block:: csharp

    dynamic instance = new DynamicWrapper
                       {
                           { "Property1", 123 },
                           { "Property2", "Abc" },
                           { "Property3", DateTime.Now },
                           {
                               "Property4", new DynamicWrapper
                                            {
                                                { "SubProperty1", 456 },
                                                { "SubProperty2", "Def" }
                                            }
                           }
                       };

Или установить значение свойства позже:

.. code-block:: csharp

    instance.Property1 = 123;
    instance.Property2 = "Abc";
    instance.Property3 = DateTime.Now;
    instance.Property4 = new DynamicWrapper();
    instance.Property4.SubProperty1 = 456;
    instance.Property4.SubProperty2 = "Def";

Значением свойства также может быть ссылка на делегат:

.. code-block:: csharp

    instance.Sum = new Func<int, int, int>((a, b) => a + b);

Обращение к свойствам динамических объектов
-------------------------------------------

Обращение к свойствам динамических объектов ничем не отличается от обращения к свойствам обычных объектов: 

.. code-block:: csharp

    var property1 = instance.Property1; // 123
    var property2 = instance.Property2; // "Abc"
    var property3 = instance.Property3; // DateTime.Now
    var property4 = instance.Property4;
    var subProperty1 = property4.SubProperty1; // 456
    var subProperty2 = instance.Property4.SubProperty2; // "Def"
    var sum = instance.Sum(2, 3); // 5
    
Рекомендации при работе с динамическими объектами
-------------------------------------------------

Динамические объекты упрощают обработку слабоструктурированных данных, но одновременно увеличивает возможность допущения ошибки, поскольку
выражения, работающие с динамическими объектами, не подвергаются синтаксическому анализу во время компиляции. Результатом любого выражения,
в котором происходит обращение к динамическому объекту или к его свойствам, является динамический объект. Таким образом, если не указывать
тип результата динамического выражения, можно получить достаточно большой блок неконтролируемого на этапе компиляции кода. Ситуация усугубляется
крайне малой информативностью стека исключений, возникающих в рамках динамического кода.

По вышеуказанным причинам рекомендуется, как можно раньше конкретизировать тип результата динамического выражения и использовать ключевое
слово ``dynamic`` только там, где это действительно нужно. Даже если вы работаете со слабоструктурированными объектами, типы данных отдельно
взятых свойств чаще всего известны, поэтому будет правильней обозначить свои ожидания сразу. Даже если вы получите ошибку приведения к типу,
вы будете знать, где и по какой причине она произошла. 

.. code-block:: csharp

    int property1 = instance.Property1; // 123
    string property2 = instance.Property2; // "Abc"
    DateTime property3 = instance.Property3; // DateTime.Now
    dynamic property4 = instance.Property4;
    int subProperty1 = property4.SubProperty1; // 456
    string subProperty2 = instance.Property4.SubProperty2; // "Def"
    int sum = instance.Sum(2, 3); // 5
    
Сериализация динамических объектов
----------------------------------

Экземпляры класса ``InfinniPlatform.Sdk.Dynamic.DynamicWrapper`` могут быть успешно сериализованы и десериализованы в JSON. Дополнительную информацию
по данному вопросу см. в разделе :doc:`/06-serialization/index`.
