Выражения CRON
==============

Расписание выполнения задания задается в виде выражений в стиле `CRON <https://en.wikipedia.org/wiki/Cron>`_.
``cron`` - это классический планировщик задач в UNIX-подобных операционных системах, использующийся для
периодического выполнения заданий в определённое время. Выражения CRON позволяют определить расписание
выполнения задания в календарном виде. Например, "В 8:00 каждый день с понедельника по пятницу" или
"В 13:30 каждую последнюю пятницу месяца". Выражения CRON - мощный и одновременно простой инструмент,
однако требует небольшого экскурса для его освоения.

Формат выражения CRON
---------------------

Выражение CRON представляет собой строку, состоящую из 6 или 7 частей, разделенных пробелом. Каждая
из частей задает условие расписания, которые объединяются по правилу логического умножения (AND).
Ниже приведена графическая схема, поясняющая структуру выражения CRON. На этой схеме части
выражения помечены символом ``*``, а линиями показано назначение каждой из частей.

.. code-block:: csharp
   :emphasize-lines: 9

    ┌───────────── Секунда
    │ ┌────────────── Минута
    │ │ ┌─────────────── Час
    │ │ │ ┌──────────────── День месяца
    │ │ │ │ ┌───────────────── Месяц
    │ │ │ │ │ ┌───────────────── День недели
    │ │ │ │ │ │ ┌───────────────── Год
    │ │ │ │ │ │ │
    * * * * * * *

Части выражения CRON могут содержать только допустимые значения с использованием определенных
комбинаций специальных символов. Ниже приведена таблица с указанием допустимых значений и
специальных символов для каждой из частей выражения CRON.

.. csv-table::
   :header: "Часть", "Обязательность", "Допустимые значения", "Специальные символы"

    "Секунда",     "Да",  "0-59",                  "``,`` ``-`` ``*`` ``/``"
    "Минута",      "Да",  "0-59",                  "``,`` ``-`` ``*`` ``/``"
    "Час",         "Да",  "0-23",                  "``,`` ``-`` ``*`` ``/``"
    "День месяца", "Да",  "1-31",                  "``,`` ``-`` ``*`` ``/`` ``?`` ``L`` ``W``"
    "Месяц",       "Да",  "1-12 (1 - январь)",     "``,`` ``-`` ``*`` ``/``"
    "День недели", "Да",  "1-7 (1 - воскресенье)", "``,`` ``-`` ``*`` ``/`` ``?`` ``L`` ``#``"
    "Год",         "Нет", "1970-2099",             "``,`` ``-`` ``*`` ``/``"

Специальные символы CRON
------------------------

* ``*``. Означает все допустимые значения. Например, ``*`` для *минут* означает "каждую минуту".

* ``,``. Используется для перечисления значений. Например, ``2,4,6`` для *дней недели* означает "понедельник, среда и пятница".

* ``-``. Используется для определения диапазона значений. Например, ``10-12`` для *часов* означает "10, 11 и 12 часов".

* ``/``. Используется для определения периода повторения. Например, ``0/15`` для *секунд* означает "0, 15, 30 и 45 секунд",
  а ``5/15`` означает "5, 20, 35 и 50 секунд"; ``1/3`` для *дней месяца* означает "через каждых 3 дня с 1 дня месяца".

* ``?``. Означает отсутствие определенного значения. Использование этого символа допустимо только в одной из двух частей -
  *день месяца* или *день недели*, но не в двух сразу. Например, если необходимо выполнять задание 10 числа каждого месяца
  вне зависимости от дня недели, то в части *дня месяца* нужно указать ``10``, а в части *дня недели* - ``?``.

* ``L`` ("last"). Имеет различный смысл для каждой из двух частей - *день месяца* и *день недели*. Например, значение ``L``
  для *дня месяца* означает "последний день месяца" (31 для января, 28 для февраля в не високосный год). Это же значение
  для *дня недели* означает "последний день недели" - ``7`` (суббота). Однако если использовать символ ``L`` в части
  *дня недели* после определенного значения, это означает "последний указанный день недели месяца". Например, ``6L``
  означает "последнюю пятницу месяца". Также можно определить смещение относительно последнего дня месяца. Например,
  ``L-3`` для *дня месяца* означает "за 3 дня до последнего дня месяца".

* ``W`` ("weekday"). Означает рабочий день недели (с понедельника по пятницу включительно), наиболее близкий к указанному
  дню месяца. Например, ``15W`` для *дня месяца* означает "рабочий день недели, наиболее близкий к 15 числу месяца".
  Например, если 15-е число - суббота, задание будет обработано 14-го числа в пятницу. Если 15-е число - воскресенье,
  задание будет обработано 16-го числа в понедельник. Если 15-е число - четверг, задание будет обработано 15-го числа
  в четверг. Однако, если значение равно ``1W`` и 1-е число - суббота, то событие произойдет 3-го числа в понедельник,
  поскольку данное правило работает только в рамках одного месяца. Также допустима комбинация ``LW``, означающая
  комбинация "последний рабочий день месяца".

* ``#``. Используется для определения n-го дня недели в месяце. Например, ``6#3`` для *дня недели* означает "третью
  пятницу месяца", ``2#1`` - "первый понедельник месяца", ``4#5`` - "пятую среду месяца". 


.. index:: IJobInfoBuilder

Определение выражений CRON
--------------------------

Выражение CRON используются при создании :doc:`информации о здании </17-scheduler/index>`. При этом 
может быть использована одна из перегрузок метода ``CronExpression()``, который определен в интерфейсе
``InfinniPlatform.Scheduler.Contract.IJobInfoBuilder``.

.. code-block:: csharp
   :emphasize-lines: 6

    IJobInfoFactory factory;

    ...

    // Задание с именем "SomeJob" будет выполняться ежедневно в 10:35 с помощью обработчика SomeJobHandler
    factory.CreateJobInfo<SomeJobHandler>("SomeJob", b => b.CronExpression("0 35 10 * * ?"))

Как видно, выражения CRON просты в использовании, достаточно запомнить основной принцип определения выражений.
Тем не менее, со временем можно забыть позицию каждой части выражения, назначение специальных символов выражения
или правила их применения. По этой причине метод ``CronExpression()`` имеет перегрузку с возможностью использования
специальных методов для построения выражения CRON. Сигнатура этих методов использует концепцию `DSL`_ (Domain Specific
Language - предметно-ориентированного языка), которая реализована в виде `fluent interface`_. Ниже приведен ранее
рассмотренный пример, но с использованием DSL-перегрузки метода ``CronExpression()``.

.. code-block:: csharp
   :emphasize-lines: 6

    IJobInfoFactory factory;

    ...

    // Задание с именем "SomeJob" будет выполняться ежедневно в 10:35 с помощью обработчика SomeJobHandler
    factory.CreateJobInfo<SomeJobHandler>("SomeJob", b => b.CronExpression(e => e.AtHourAndMinuteDaily(10, 35)))


.. index:: ICronExpressionBuilder

Примеры выражений CRON
----------------------

.. list-table::
   :header-rows: 1

   * - Выражение CRON
     - Использование ``ICronExpressionBuilder``
     - Описание значения

   * - .. code-block:: csharp

           "* * * * * ?"
     - .. code-block:: csharp

            b => { }
     - Каждую секунду.

   * - .. code-block:: csharp

           "0 0 12 * * ?"
     - .. code-block:: csharp

            b => b.AtHourAndMinuteDaily(12, 00)
     - Ежедневно в 12:00.

   * - .. code-block:: csharp

           "0 15 10 * * ?"
     - .. code-block:: csharp

            b => b.AtHourAndMinuteDaily(10, 15)
     - Ежедневно в 10:15.

   * - .. code-block:: csharp

           "0 * 14 * * ?"
     - .. code-block:: csharp

            b => b.Hours(i => i.Each(14))
                  .Minutes(i => i.Every())
                  .Seconds(i => i.Each(0))
     - Ежедневно каждую минуту с 14:00 по 14:59.

   * - .. code-block:: csharp

           "0 0/5 14 * * ?"
     - .. code-block:: csharp

            b => b.Hours(i => i.Each(14))
                  .Minutes(i => i.Each(0, 5))
                  .Seconds(i => i.Each(0))
     - Ежедневно каждые 5 минут с 14:00 по 14:55.

   * - .. code-block:: csharp

           "0 0/5 14,18 * * ?"
     - .. code-block:: csharp

            b => b.Hours(i => i.EachOfSet(14, 18))
                  .Minutes(i => i.Each(0, 5))
                  .Seconds(i => i.Each(0))
     - Ежедневно каждые 5 минут с 14:00 по 14:55 и с 18:00 по 18:55.

   * - .. code-block:: csharp

           "0 0-5 14 * * ?"
     - .. code-block:: csharp

            b => b.Hours(i => i.Each(14))
                  .Minutes(i => i.EachOfRange(0, 5))
                  .Seconds(i => i.Each(0))
     - Ежедневно каждую минуту с 14:00 по 14:05.

   * - .. code-block:: csharp

           "0 10,44 14 * 3 4"
     - .. code-block:: csharp

            b => b.Hours(i => i.Each(14))
                  .Minutes(i => i.EachOfSet(10, 44))
                  .Seconds(i => i.Each(0))
                  .Month(i => i.Each(Month.March))
                  .DayOfWeek(i => i.Each(DayOfWeek.Wednesday))
     - Каждую среду марта в 14:10 и 14:44.

   * - .. code-block:: csharp

           "0 15 10 * * 2-6"
     - .. code-block:: csharp

            b => b.AtHourAndMinuteDaily(10, 15)
                  .DayOfWeek(i => i.EachOfRange(DayOfWeek.Monday, DayOfWeek.Friday))
     - Каждый день с понедельника по пятницу в 10:15.

   * - .. code-block:: csharp

           "0 15 10 15 * *"
     - .. code-block:: csharp

            b => b.AtHourAndMinuteDaily(10, 15)
                  .DayOfMonth(i => i.Each(15))
     - 15 числа каждого месяца в 10:15.

   * - .. code-block:: csharp

           "0 15 10 L * *"
     - .. code-block:: csharp

            b => b.AtHourAndMinuteDaily(10, 15)
                  .DayOfMonth(i => i.EachLast())
     - В последний день каждого месяца в 10:15.

   * - .. code-block:: csharp

           "0 15 10 L-2 * *"
     - .. code-block:: csharp

            b => b.AtHourAndMinuteDaily(10, 15)
                  .DayOfMonth(i => i.EachLast(2))
     - За 2 дня до последнего дня месяца в 10:15.

   * - .. code-block:: csharp

           "0 15 10 * * 6L"
     - .. code-block:: csharp

            b => b.AtHourAndMinuteDaily(10, 15)
                  .DayOfWeek(i => i.EachLast(DayOfWeek.Friday))
     - Каждую последнюю пятницу месяца в 10:15.

   * - .. code-block:: csharp

           "0 15 10 * * 6L 2016-2020"
     - .. code-block:: csharp

            b => b.AtHourAndMinuteDaily(10, 15)
                  .DayOfWeek(i => i.EachLast(DayOfWeek.Friday))
                  .Year(i => i.EachOfRange(2016, 2020))
     - Каждую последнюю пятницу месяца в 10:15 с 2016 по 2020 год.

   * - .. code-block:: csharp

           "0 15 10 * * 6#3"
     - .. code-block:: csharp

            b => b.AtHourAndMinuteDaily(10, 15)
                  .DayOfWeek(i => i.EachNth(DayOfWeek.Friday, 3))
     - Каждую третью пятницу месяца в 10:15.

   * - .. code-block:: csharp

           "0 0 12 1/5 * *"
     - .. code-block:: csharp

            b => b.AtHourAndMinuteDaily(12, 00)
                  .DayOfMonth(i => i.Each(1, 5))
     - Через каждых 5 дней с 1 дня месяца в 12:00.

   * - .. code-block:: csharp

           "0 11 11 11 11 *"
     - .. code-block:: csharp

            b => b.AtHourAndMinuteDaily(11, 11)
                  .DayOfMonth(i => i.Each(11))
                  .Month(i => i.Each(Month.November))
     - 11 ноября в 11:11.

   * - .. code-block:: csharp

           "0 15 10 * * 2,4,6"
     - .. code-block:: csharp

            b => b.AtHourAndMinuteOnGivenDaysOfWeek(10, 15,
                       DayOfWeek.Monday,
                       DayOfWeek.Wednesday,
                       DayOfWeek.Friday)
     - Каждый понедельник, среду и пятницу в 10:15.

   * - .. code-block:: csharp

           "0 15 10 1,10,15 * *"
     - .. code-block:: csharp

            b => b.AtHourAndMinuteMonthly(10, 15,
                       1, 10, 15)
     - 1, 10 и 15 числа в 10:15.


.. _DSL: https://en.wikipedia.org/wiki/Domain-specific_language
.. _`fluent interface`: http://martinfowler.com/bliki/FluentInterface.html