.. index:: IJobInfo 

Информация о задании
====================

Для планирования задания необходимо предоставить информацию со сведениями об обработчике задания
и времени вызова этого обработчика. Интерфейс ``InfinniPlatform.Scheduler.Contract.IJobInfo``
определяет структуру с информацией о задании.

Описание атрибутов задания
--------------------------

* ``Id``. Уникальный идентификатор задания. Обязательный атрибут. Формируется автоматически и представляет
  собой объединение свойств ``Group`` и ``Name``, разделенных символом ``.`` (точка). Используется при
  формировании :ref:`уникального идентификатора экземпляра задания <job-handler-context>` в момент вызова
  :doc:`обработчика </17-scheduler/scheduler-jobhandler>`.

* ``Group``. Имя группы заданий. Обязательный атрибут. Используется при формировании уникального
  идентификатора задания ``Id`` и позволяет логически группировать задания. Если группа не указана,
  используется константа ``Default``.

* ``Name``. Имя задания. Обязательный атрибут. Используется при формировании уникального идентификатора
  задания ``Id``, должно быть уникально в рамках группы ``Group``. Значения по умолчанию нет.

* ``State``. Состояние выполнения задания. Обязательный атрибут. По умолчанию задание всегда запланировано
  для выполнения - ``JobState.Planned``, однако есть возможность определить состояние в приостановленном
  состоянии - ``JobState.Paused``, чтобы иметь возможность начать его планирование не сразу после добавления
  в планировщик, а только тогда, когда от приложения поступит соответствующий запрос.

* ``MisfirePolicy``. Политика обработки пропущенных задания. Обязательный атрибут. По умолчанию пропущенные
  задания игнорируются - ``JobMisfirePolicy.DoNothing``, однако есть возможность обработать все пропущенные
  задания сразу после начала планирования, а далее далее следовать расписанию - ``JobMisfirePolicy.FireAndProceed``.

* ``HandlerType``. Тип обработчика заданий. Обязательный атрибут. Полное имя типа обработчика заданий, включающее
  пространство имен и имя сборки, в которой объявлен обработчик. Используется при вызове обработчика.

* ``Description``. Описание назначения задания. Необязательный атрибут. Например, описание назначения задания
  или логики его обработки. Иначе говоря, все, что может понадобится для понимания происходящих процессов.

* ``StartTimeUtc``. Время начала планирования задания (в формате UTC). Необязательный атрибут. Если не указано
  явно, задание начинает планироваться сразу после добавления в планировщик, иначе только начиная с указанного
  момента времени. Время начала планирования не должно быть больше времени его окончания ``EndTimeUtc``.

* ``EndTimeUtc``. Время окончания планирования задания (в формате UTC). Необязательный атрибут. Если не указано
  явно, задание планируется до окончания работы приложения, иначе только до указанного момента времени. Время
  окончания планирования не должно быть меньше времени его начала ``StartTimeUtc``.

* ``CronExpression``. Расписание вызова обработчика заданий в стиле :doc:`CRON </17-scheduler/scheduler-cronexpression>`.
  Необязательный атрибут. Позволяет определить расписание в календарном виде. Если не указано, время первого вызова совпадает
  с временем начала планирования задания ``StartTimeUtc``.

* ``Data``. Данные для выполнения задания. Необязательный атрибут. Значение этого атрибута будет доступно в контексте обработки
  задания. Значение данного атрибута должно быть :doc:`сериализуемым </06-serialization/index>`.

.. note:: Планировщик заданий учитывает значения всех указанных выше атрибутов,
          объединяя все условия по правилу логического умножения (AND).


.. index:: IJobInfoFactory

Создание информации о задании
-----------------------------

Для создания информации о задании используется фабрика ``InfinniPlatform.Scheduler.Contract.IJobInfoFactory``,
предоставляющая несколько перегрузок метода ``CreateJobInfo()``. Сигнатура метода ``CreateJobInfo()`` использует
концепцию `DSL`_ (Domain Specific Language - предметно-ориентированного языка), которая реализована в виде
`fluent interface`_.

.. code-block:: csharp
   :emphasize-lines: 6

    IJobInfoFactory factory;

    ...

    // Задание с именем "SomeJob" будет выполняться ежедневно в 10:35 с помощью обработчика SomeJobHandler
    factory.CreateJobInfo<SomeJobHandler>("SomeJob", b => b.CronExpression(e => e.AtHourAndMinuteDaily(10, 35)))


.. _DSL: https://en.wikipedia.org/wiki/Domain-specific_language
.. _`fluent interface`: http://martinfowler.com/bliki/FluentInterface.html
