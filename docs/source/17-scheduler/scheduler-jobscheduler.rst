.. index:: IJobScheduler

Управление планировщиком заданий
================================

Управление планировщиком заданий осуществляется с помощью методов интерфейса ``InfinniPlatform.Scheduler.Contract.IJobScheduler``.
Все методы, описанные ниже применяются не к отдельному узлу кластера, в котором они были вызваны, а ко всем узлам кластера.


.. _add-or-update-job:
.. index:: IJobScheduler.AddOrUpdateJob
.. index:: IJobScheduler.AddOrUpdateJobs

Добавление и обновление заданий
-------------------------------

Метод ``AddOrUpdateJob()`` добавляет или обновляет :doc:`информацию о запланированных заданиях </17-scheduler/scheduler-jobinfo>`.
В результате работы этого метода информация о задании сохраняется в :doc:`постоянном хранилище </08-document-storage/index>`,
что гарантирует выполнение этих заданий даже после перезапуска приложения. Данная функциональность обеспечивается встроенным
:ref:`источником сохраненных заданий <persistent-job-info-source>`.

Помимо этого метод ``AddOrUpdateJob()`` предоставляет возможность добавлять задание в приостановленном
состоянии - ``JobState.Paused``, чтобы иметь возможность начать его планирование не сразу после добавления
в планировщик, а только тогда, когда от приложения поступит соответствующий запрос, например, 
при :ref:`возобновления планирования задания <resume-job>` с помощью метода ``ResumeJob()``.

Для добавления или обновления сразу нескольких заданий, следует использовать метод ``AddOrUpdateJobs()``,
который выполняет все вышеуказанные действия, применительно к каждому из указанных заданий.


.. _delete-job:
.. index:: IJobScheduler.DeleteJob
.. index:: IJobScheduler.DeleteJobs
.. index:: IJobScheduler.DeleteAllJobs

Удаление заданий
----------------

Метод ``DeleteJob()`` позволяет удалить указанное задание. Удаление задания означает не только
прекращение его планирования, но и удаление :doc:`информации об этом задании </17-scheduler/scheduler-jobinfo>`
из :doc:`постоянного хранилища </08-document-storage/index>`. По этой причине нет никакой возможности
:ref:`возобновления планирования задания <resume-job>`, например, с помощью метода ``ResumeJob()``.
Однако планирование удаленных заданий, :doc:`объявленных в коде </17-scheduler/scheduler-jobinfosource>`,
будет прекращено лишь до момента перезапуска приложения.

Для удаления сразу нескольких или всех заданий, следует использовать соответственно методы ``DeleteJobs()``
или ``DeleteAllJobs()``. Эти методы выполняют все вышеуказанные действия, применительно к каждому из заданий.


.. _pause-job:
.. index:: IJobScheduler.PauseJob
.. index:: IJobScheduler.PauseJobs
.. index:: IJobScheduler.PauseAllJobs

Приостановка планирования заданий
---------------------------------

Метод ``PauseJob()`` приостанавливает планирование указанного задания. Если :doc:`информация об этом задании </17-scheduler/scheduler-jobinfo>`
была сохранена в :doc:`постоянном хранилище </08-document-storage/index>`, она будет обновлена. :ref:`Возобновить планирование <resume-job>`
приостановленного таким образом задания можно, например, с помощью метода ``ResumeJob()``.

Для приостановки планирования сразу нескольких или всех заданий, следует использовать соответственно методы ``PauseJobs()``
или ``PauseAllJobs()``. Эти методы выполняют все вышеуказанные действия, применительно к каждому из заданий.


.. _resume-job:
.. index:: IJobScheduler.ResumeJob
.. index:: IJobScheduler.ResumeJobs
.. index:: IJobScheduler.ResumeAllJobs

Возобновление планирования заданий
----------------------------------

Метод ``ResumeJob()`` возобновляет планирование указанного задания. Если :doc:`информация об этом задании </17-scheduler/scheduler-jobinfo>`
была сохранена в :doc:`постоянном хранилище </08-document-storage/index>`, она будет обновлена.

Для возобновления планирования сразу нескольких или всех заданий, следует использовать соответственно методы ``ResumeJobs()``
или ``ResumeAllJobs()``. Эти методы выполняют все вышеуказанные действия, применительно к каждому из заданий.


.. _trigger-job:
.. index:: IJobScheduler.TriggerJob
.. index:: IJobScheduler.TriggerJobs
.. index:: IJobScheduler.TriggerAllJob

Досрочное выполнение заданий
----------------------------

Метод ``TriggerJob()`` вызывает досрочное выполнение указанного задания. Перед выполнением этого метода нужно убедиться,
что задание было :ref:`добавлено <add-or-update-job>` и находится в запланированном состоянии - ``JobState.Planned``.

При досрочном выполнении задания существует возможность указать данные для выполнения задания, отличные от тех, которые
были указаны при определении :doc:`информации о задании </17-scheduler/scheduler-jobinfo>`.

Для вызова досрочного выполнения сразу нескольких или всех заданий, следует использовать соответственно методы ``TriggerJobs()``
или ``TriggerAllJob()``. Эти методы выполняют все вышеуказанные действия, применительно к каждому из заданий.


.. index:: IJobScheduler.IsStarted
.. index:: IJobScheduler.GetStatus

Определение состояния планировщика
----------------------------------

Планировщик заданий также предоставляет два дополнительных метода, позволяющих определить его состояние во время работы приложения.

Метод ``IsStarted()`` определяет, запущено ли планирование заданий. При нормальной работе приложения этот метод должен возвращать
значение ``true``. В противном случае необходимо анализировать :doc:`журнал работы приложения </05-logging/index>`.

Метод ``GetStatus()`` позволяет сделать выборку для определения текущего статуса заданий. Следующий пример определяет количество
запланированных заданий на момент вызова метода ``GetStatus()``.

.. code-block:: csharp
   :emphasize-lines: 5

    IJobScheduler jobScheduler;

    ...

    var plannedCount = await jobScheduler.GetStatus(i => i.Count(j => j.State == JobState.Planned)); 

