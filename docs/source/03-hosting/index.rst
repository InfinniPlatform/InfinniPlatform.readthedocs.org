События приложения
==================

В любом приложении может возникнуть потребность в этапе инициализации перед началом работы приложения или
этапе деинициализации перед окончанием работы приложения. При инициализации приложения можно сделать предустановки,
например, выделить необходимые ресурсы, произвести миграцию данных, осуществить предзаполнение кэша и т.п.
При деинициализации обычно происходит обратный процесс, например, освобождение ресурсов. Оба этапа, естественно
являются необязательными и зависят от логики работы приложения и средств, с которыми оно работает.


Типы событий приложения
-----------------------

Приложения InfinniPlatform имеют возможность обарабатывать следующие события:

* Перед запуском сервисов приложения
* После запуска сервисов приложения
* Перед остановкой сервисов приложения
* После остановки сервисов приложения

Событие **перед запуском** :doc:`сервисов приложения </07-services/index>` позволяет сделать необходимые действия перед тем,
как приложение начнет отвечать на запросы. Обработчики этого события фактически определяют обязательный этап для успешного
запуска приложения. На этом этапе можно выполнить, например, миграцию данных.

Событие **после запуска** :doc:`сервисов приложения </07-services/index>` позволяет запустить фоновые задачи, необязательные
для начала работы приложения. На этом этапе можно выполнить, например, предзаполнение :doc:`кэша </11-cache/index>` необходимым
набором данных или индексацию данных.

Событие **перед остановкой** :doc:`сервисов приложения </07-services/index>` позволяет обработать запрос остановки работы
приложения. На этом этапе можно сделать запись о событии в :doc:`лог приложения </05-logging/index>`,
:doc:`оповестить </12-queues/index>` о событии другие узлы кластера, начать подготовку приложения
к завершению работы.

Событие **после остановки** :doc:`сервисов приложения </07-services/index>` позволяет сделать необходимые действия после того,
как приложение перестало отвечать на запросы. Обработчики этого события фактически определяют обязательный этап для корректного
завершения работы приложения. На этом этапе можно освободить используемые ресурсы, сохранить данные, находящиеся в памяти,
:doc:`оповестить </12-queues/index>` о событии другие узлы кластера.

.. note:: Следует иметь ввиду, что приложение может завершиться аварийно или принудительно выгружено с использованием административных
          средств. По этой причине не следует рассчитывать, что обработчики событий остановки приложения сработают при любых обстоятельствах.
          Вместо этого в обработчике события перед запуском приложения следует предусмотреть **логику восстановления** на случай, если последний
          раз приложение было завершено аварийно или принудительно.


.. index:: ApplicationEventHandler
.. index:: IApplicationEventHandler
.. index:: IApplicationEventHandler.OnBeforeStart()
.. index:: IApplicationEventHandler.OnAfterStart()
.. index:: IApplicationEventHandler.OnBeforeStop()
.. index:: IApplicationEventHandler.OnAfterStop()

Обработчик событий приложения
-----------------------------

Для написания обработчика событий достаточно реализовать интерфейс ``InfinniPlatform.Sdk.Hosting.IApplicationEventHandler`` и
:doc:`зарегистрировать </02-ioc/container-builder>` его реализацию в :doc:`модуле IoC-контейнера </02-ioc/container-module>`.
Однако самый простой вариант - унаследовать обработчик событий от абстрактного класса ``InfinniPlatform.Sdk.Hosting.ApplicationEventHandler``
и переопределить метод обработки нужного события.

Интерфейс ``InfinniPlatform.Sdk.Hosting.IApplicationEventHandler`` определяет четыре метода обработки для каждого типа события:

* ``OnBeforeStart()`` - для обработки события перед запуском сервисов приложения
* ``OnAfterStart()`` - для обработки события после запуска сервисов приложения
* ``OnBeforeStop()`` - для обработки события перед остановкой сервисов приложения
* ``OnAfterStop()`` - для обработки события после остановки сервисов приложения

В следующем примере определен обработчик, который обрабатывает событие перед запуском сервисов приложения.

.. code-block:: csharp
   :emphasize-lines: 1,3,11

    public class MyApplicationEventHandler : InfinniPlatform.Sdk.Hosting.ApplicationEventHandler
    {
        public override void OnBeforeStart()
        {
            // Код инициализации приложения
        }
    }

    // ...

    builder.RegisterType<MyApplicationEventHandler>().As<InfinniPlatform.Sdk.Hosting.IApplicationEventHandler>().SingleInstance();


Асинхронная обработка событий
-----------------------------

Все методы, определенные в интерфейсе ``InfinniPlatform.Sdk.Hosting.IApplicationEventHandler`` вызываются синхронно, то есть
не возвращают управления до тех пор, пока не будут полностью выполнены. Исключения, которые могут произойти в этих методах,
записываются в лог приложения, но не игнорируются. Подобное поведение сделано намеренно, чтобы приложение могло самостоятельно
определять обязательность прохождения определенных этапов при запуске или остановке приложения.

Если успешность обработки события необязательна, необходимо заключить обработку события в блок ``try/catch``, однако при этом
настоятельно рекомендуется записывать исключение в :doc:`лог приложения </05-logging/index>`. Если часть логики обработки
события может быть выполнена асинхронно, рекомендуется выполнять ее в отдельном потоке.

:ref:`Ниже <app-events>` прививедены рекомендуемые способы обработки событий приложения в зависимости от его типа. Например,
код метода ``OnBeforeStart()`` должен быть синхронным, не должен игнорировать происходящие исключения, должен выполнять
обязательные действия, необходимые перед началом работы приложения. Код метода ``OnAfterStart()`` должен быть асинхронным,
не должен воспринимать исключение, как аварийную ситуацию, должен выполнять необязательные действия.

.. note:: Следует стараться минимизировать время работы методов ``OnBeforeStart()`` и ``OnAfterStop()``, так как это может
          сократить соответственно время запуска и остановки приложения. Это в свою очередь позволит ускорить процесс
          развертывания приложения или его перезапуск.

.. _app-events:

.. csv-table:: Рекомендуемые способы обработки событий приложения
   :header: "Метод обработчика", "Способ обработки", "Может бросить исключение"

    "``OnBeforeStart()``", "Синхронный", "Да"
    "``OnAfterStart()``", "Асинхронный", "Нет" 
    "``OnBeforeStop()``", "Асинхронный", "Нет"
    "``OnAfterStop()``", "Синхронный", "Нет"

Ниже приведен пример асинхронной обработки события ``OnAfterStart()`` с помощью метода `Task.Run()`_.

.. code-block:: csharp
   :emphasize-lines: 3,5,13

    public class MyApplicationEventHandler : InfinniPlatform.Sdk.Hosting.ApplicationEventHandler
    {
        public override void OnAfterStart()
        {
            Task.Run(() =>
                     {
                         try
                         {
                             // Код инициализации приложения
                         }
                         catch (Exception exception)
                         {
                             // Запись исключения в лог приложения
                         }
                     });
        }
    }


.. _`Task.Run()`: https://msdn.microsoft.com/en-US/library/system.threading.tasks.task.run(v=vs.110).aspx
