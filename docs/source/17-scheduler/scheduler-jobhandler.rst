.. index:: IJobHandler

Обработчик заданий
==================

Обработчик заданий - это класс, реализующий интерфейс ``InfinniPlatform.Scheduler.Contract.IJobHandler``.
Каждое расписание должно быть :doc:`сопоставлено </17-scheduler/scheduler-jobinfo>` с определенным
типом обработчика. В указанные в расписании моменты времени планировщик заданий производит вызов
метода ``Handle()`` соответствующего обработчика.

.. warning:: При реализации обработчиков заданий следует предусмотреть обработку возможных конфликтных ситуаций.
             Например, случай, когда задания обрабатываются медленней, чем возникают. Также возможны пропуски
             заданий, например, из-за остановки работы приложение на некоторое время. Или, наоборот, вызов
             досрочного, незапланированного выполнения задания, а также вызов обработчика не совсем точно
             в моменты, определенные в расписании.


.. index:: IContainerBuilder.RegisterJobHandlers

Регистрация обработчика заданий
-------------------------------

Создание экземпляров обработчиков заданий и управление ими осуществляется посредством :doc:`IoC-контейнера </02-ioc/index>`.
По этой причине все обработчики должны быть :doc:`зарегистрированы в IoC-контейнере </02-ioc/container-builder>`,
например, так, как показано в следующем примере. Следует обратить внимание, что каждый обработчик *обязательно*
должен быть зарегистрирован как самостоятельный компонент с помощью метода ``AsSelf()``.

.. code-block:: csharp
   :emphasize-lines: 7

    IContainerBuilder builder;

    ...

    builder.RegisterType<SomeJobHandler>()
           .As<IJobHandler>()
           .AsSelf()
           .SingleInstance();

Чтобы не производить регистрацию каждого обработчика в отдельности, можно воспользоваться универсальным методом
расширения ``RegisterJobHandlers()``, который производит регистрацию всех обработчиков указанной сборки.

.. code-block:: csharp
   :emphasize-lines: 5

    IContainerBuilder builder;

    ...

    builder.RegisterJobHandlers(assembly);


.. _job-handler-context:
.. index:: IJobHandlerContext

Контекст обработки задания
--------------------------

Вызов метода ``Handle()`` обработчика заданий в общем случае производится в указанные в расписании моменты времени.
Момент вызова обработчика, а также дополнительная информация, необходимая для обработки задания, называется контекстом
обработки задания. Контекст представлен интерфейсом ``InfinniPlatform.Scheduler.Contract.IJobHandlerContext``, экземпляр
которого передается вторым параметром метода ``Handle()``.

.. code-block:: csharp
   :emphasize-lines: 3

    public class SomeJobHandler : IJobHandler
    {
        public Task Handle(IJobInfo jobInfo, IJobHandlerContext context)
        {
            // Обработка задания...
        }
    }

Ниже приведено описание атрибутов контекста обработки задания.

* ``InstanceId``. Уникальный идентификатор экземпляра задания. Формируется на основе уникального идентификатора задания
  ``IJobInfo.Id``, указанного при определении :doc:`информации о задании </17-scheduler/index>`, и запланированного
  времени выполнения ``ScheduledFireTimeUtc``. Каждый экземпляр задания обрабатывается один раз на одном из узлов
  кластера, при этом сам факт обработки задания фиксируется в :ref:`журнале планировщика заданий <job-instance>`.

* ``FireTimeUtc``. Фактическое время выполнения задания (в формате UTC). В общем случае не должно сильно отличаться от
  запланированного времени выполнения ``ScheduledFireTimeUtc``, тем не менее, такие ситуации возможны.

* ``ScheduledFireTimeUtc``. Запланированное время выполнения задания (в формате UTC). Соответствует правилам, указанным
  при определении :doc:`информации о задании </17-scheduler/index>`.

* ``PreviousFireTimeUtc``. Время предыдущего запланированного выполнения задания (в формате UTC). Равно значению ``ScheduledFireTimeUtc``
  предыдущего задания или ``null``, если обработчик вызывается первый раз или не по расписанию.

* ``NextFireTimeUtc``. Время следующего запланированного выполнения задания (в формате UTC). Равно значению ``ScheduledFireTimeUtc``
  следующего задания или ``null``, если последующие срабатывания не предусмотрены или обработчик вызывается не по расписанию. 

* ``Data``. Данные для выполнения задания. Указывается при определении :doc:`информации о задании </17-scheduler/index>` или
  при вызове досрочного выполнения задания.


Пример обработчика заданий
--------------------------

Для создания обработчика заданий достаточно создать класс, реализующий интерфейс ``InfinniPlatform.Scheduler.Contract.IJobHandler``
с единственным методом ``Handle()``. В конструктор обработчика можно передать любые зависимости, 
:doc:`зарегистрированные в IoC-контейнере </02-ioc/container-builder>`. Важно отметить, что метод
``Handle()`` является асинхронным, благодаря чему становится возможным использовать все преимущества
асинхронного программирования с использованием ключевых слов `async/await`_.

.. code-block:: csharp
   :emphasize-lines: 1,3

    public class SomeJobHandler : IJobHandler
    {
        public async Task Handle(IJobInfo jobInfo, IJobHandlerContext context)
        {
            // Обработка задания...
            await Console.Out.WriteLineAsync($"Greetings from {nameof(SomeJobHandler)}!");
        }
    }


.. _`async/await`: https://msdn.microsoft.com/en-us/library/mt674882.aspx
